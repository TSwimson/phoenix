#!/bin/bash

# Colours
reset=$(tput sgr0)
bold=$(tput bold)
blue=$(tput setaf 4)

app='Phoenix'

# Exit on error
trap 'exit' ERR

# Unset arguments
unset code_sign_identity
unset dsa_signature_key_path
unset output_directory

# Helpers

help() {
  echo >&2 "\
${bold}Usage:${reset} $(basename $0) -s code-sign-identity -d dsa-signature-key-path -o output-directory

Arguments:
  -s code-sign-identity     used to sign the app
  -d dsa-signature-key-path used to create the DSA-signature
  -o output-directory       where the app archive is created"
}

missing_argument() {
  echo >&2 "Option -$1 requires an argument."
}

non_existent_path() {
  echo >&2 "Path “$1” does not exist."
}

describe() {
  echo -e "\n${bold}${blue}${1}${reset}\n"
}

get_app_property() {
  /usr/libexec/PlistBuddy -c "Print $1" $app/Info.plist
}

# Parse arguments
while getopts ':s:d:o:' opt; do

  case $opt in

    s)
      code_sign_identity=$OPTARG
    ;;

    d)
      dsa_signature_key_path=$OPTARG
    ;;

    o)
      output_directory=$OPTARG
    ;;

    :)
      missing_argument $OPTARG
      exit 1
    ;;

    ?)
      help
      exit 1
    ;;

  esac

done

# Invalid arguments
if [ ! "$code_sign_identity" ] || [ ! "$dsa_signature_key_path" ] || [ ! "$output_directory" ]; then
  help
  exit 1
fi

# Verify paths

if [ ! -f "$dsa_signature_key_path" ]; then
  non_existent_path "$dsa_signature_key_path"
  exit 1
fi

if [ ! -d "$output_directory" ]; then
  non_existent_path "$output_directory"
  exit 1
fi

# Build app

version=$(get_app_property 'CFBundleShortVersionString')
build_number=$(get_app_property 'CFBundleVersion')
archive="phoenix-$version.tar.gz"

if [ -f "$output_directory/$archive" ]; then
  echo "Archive “"$archive"” already exists. Exiting..."
  exit 1
fi

describe "Building $app..."

xcodebuild -workspace $app.xcworkspace \
           -scheme $app \
           -configuration Release \
           SYMROOT="$PWD/build/" \
           CODE_SIGN_IDENTITY="$code_sign_identity" \
           clean build

# Verify app

describe 'Verifying signed app...'

cd build/Release
codesign --verbose=4 --verify $app.app
spctl --verbose=4 --assess --type execute $app.app

# Archive app

describe 'Archiving app...'

tar czf "$output_directory/$archive" $app.app
echo "Archived to “"$output_directory/$archive"”."
cd $output_directory

# Create DSA-signature

describe 'Creating DSA-signature for archive...'

signature=$(openssl dgst -sha1 -binary < $archive | openssl dgst -dss1 -sign "$dsa_signature_key_path" | openssl enc -base64)
echo "DSA: $signature"

# Collect information

describe 'Collecting release information...'

echo "Date: $(LANG=en date '+%a, %d %b %Y %T %z')"
echo "Version: $version ($build_number)"
echo "Archive: $archive"
echo "Size: $(stat -f '%z' $archive)"
echo "SHA-256: $(shasum -a 256 $archive)"
echo "Signature: $signature"

describe 'Done.'
